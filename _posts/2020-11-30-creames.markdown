---
layout: paper-summary
title:  "On-Line Memory Compression for Embedded Systems"
date:   2020-11-30 21:27:00 -0500
categories: paper
paper_title: "On-Line Memory Compression for Embedded Systems"
paper_link: https://dl.acm.org/doi/10.1145/1698772.1698785
paper_keyword: Compression; DRAM Compression; CREAMES; Embedded compression
paper_year: ACM Transactions 2010
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper proposes CREAMES, a main memory compression solution for embedded systems where memory is a scarce
resource, while no disk is present as swap space. 
This paper points out that conventional solutions for main memory compression will not work on embedded platform,
since these prior solutions usually assume disks as the backing store of the virtual memory system.
The paper also lists five challenges for a main memory compression solution on embedded platforms. 
First, compressed and uncompressed memory region must be carefully maintained, such that the application will not
be terminted due to lack of usable memory. There is a trade-off: On one hand, if too much storage is dedicated
to storing compressed pages, application's memory allocation requests might fail, while the compression region still
has free space. On the other hand, if the compression region is too small, the overall compression ratio would be 
insignificant, limiting the effectiveness of compression.
Second, the compression algorithm must achieve a balance between compression ratio, compression latency, and energy 
compsution. Although this is the general requirement for nearly all compression solutions, it is particularly important
on embedded platforms, due to limited processing power and battery size.
Third, the memory management module for compressed pages should utilize compressed memory region efficiently to reduce
fragmentation, since compressed pages are variable sized. These pages should be stored as compactly as possible, while
minimizing relocations when the compressed size changes.
Fourth, the compressed memory region should be dynamically adjusted to fit dynamic program behavior, as different
applications demonstrate different memory footprints.
Lastly, the memory overhead for supporting compression should be minimized, since memory is a scarce resource on 
embedded platform. 

The paper assumes an embedded platform with virtual memory, but no disk for swapping out pages when physical memory
is over-committed. The main memory size is tens of MBs, in which some of them is dedicated to storing program code 
and the firmware image, which are copied from the embedded to embedded flash chips to the main memory at startup time. 
Although this paper only discusses data compression, meaning that only working data in the main memory is considered
for compression, code compression can also be applied to the flash image, which is orthogonal to CREAMES, and can
be applied individually.
