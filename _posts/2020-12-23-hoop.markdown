---
layout: paper-summary
title:  "HOOP: Efficient Hardware-Assisted Out-of-Place Update for Non-Volatile Memory"
date:   2020-12-23 15:48:00 -0500
categories: paper
paper_title: "HOOP: Efficient Hardware-Assisted Out-of-Place Update for Non-Volatile Memory"
paper_link: https://dl.acm.org/doi/10.1109/ISCA45697.2020.00055
paper_keyword: NVM; Redo Logging; HOOP
paper_year: ISCA 2020
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

**Highlight:**

1. Using redo logging for failure atomicity. The read redirection problem is addressed by an on-memory mapping table,
   which indices the redo log entries for both committed and uncommitted data.
   Log replay is performed in the background by applying log entries back to the home addresses, and then remove the
   mapping table entry.

2. The cache hierarchy does not track the write set (read set is not tracked for failure atomicity) of a transaction.
   Instead, the write set is sent to the memory controller when they are first written. 
   This is different from a design where a subset of writes are cached in the hierarchy, which is only flushed back
   on transaction commit via tag walk.
   HOOP avoids the tag walk at the cost of longer first-time write latency.

3. GC interval is upper bounded by the controller's mapping table size

**Lowlight:**

1. This paper makes a fundamental mistake of claiming that the algorithm is shadow paging, while it is actually redo 
   logging with an auxiliary index. I do appreciate this combination, which has not been fully explored. I also quite 
   appreciate the idea of amortizing multiple transactions' updates to one log replay, and byte-granularity logging, 
   but by the end of the day, this is really not shadow paging.
   In shadow paging design, there is no fixed home location for data items to be written back, which is also the 
   biggest difference between shadow paging and redo logging.
   Also the paper separates shadow paging with log-structured design, but these two are in fact the same thing,
   i.e., log-structured NVM is just an aggressive case of shadowing.

2. If the on-controller mapping table is full, then GC must be invoked, and there is no way to avoid this.
   The problem is the size of a transaction is upper bounded by the mapping table size, since otherwise the
   table would overflow first, but no entry can be released, since no committed log entry is replayed.
   The paper failed even to mention this issue.

This paper proposes HOOP, a hardware redo logging design with low write amplification and performance overhead for
achieving transactional failure atomicity.
The paper is motivated by the fact that most previous designs either use logging or shadow paging, which both have 
flaws. Logging, for example, requiring writing the same piece of data twice, first to the log buffer, and then to
the home location, which doubles the write bandwidth to the NVM device, harming device lifetime as well as available
bandwidth on the bus. In addition, both undo and redo logging approaches enforce write ordering between log entry
and dirty data, which is on the critical path of the execution, degrading performance as the pipeline gets frequently stalled.
Shadow paging, on the other hand, still incurs write amplification if implemented in page granularity. With cache
line granularity shadowing, writes no longer require duplicating a page, but previous hardware proposals introduce
other performance bottleneck such as TLB translation entries which brings TLB shootdown cost on each entry update. 
Furthermore, the paper points out that log-structured NVM is also infisible, despite good write performance and 
locality, due to the high read indirection cost, which can be as bad as O(log(N)) where N is the number of log 
entries on the device.

This paper 
