---
layout: paper-summary
title:  "Rebooting Virtual Memory with Midgard"
date:   2021-06-25 00:10:00 -0500
categories: paper
paper_title: "Rebooting Virtual Memory with Midgard"
paper_link: http://cs.yale.edu/homes/abhishek/sidgupta-isca21.pdf
paper_keyword: Virtual Memory; Segmentation; Midgard
paper_year: 
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper proposes Midgard, a novel virtual memory framework for reduced translation overhead on the critical path.
The paper is motived by the fact that memory translation has become a major performance bottleneck on today's multicore
platform, where several TBs of memory on a single node is not uncommon.
Maintaining large working sets in the main memory requires proportionally more translation entries, as modern hardware 
still performs address translation in a fixed granularity.
Unfortunately, the hardware structure for caching these entries for fast access, i.e., TLBs, cannot scale with the 
growth of working set size for various reasons. As a result, when the working set size exceeds the maximum coverage 
of the TLB, the MMU must frequently perform page walks to bring new translation entries into the TLB.
This is likely on the critical path, since memory instructions will remain in the ROB and/or various queues until
their addresses are resolved, which can potentially cause structural hazard to the following instructions. 
The paper also points out that, since TLBs are essentially caches to main memory data (PTEs), large TLBs also complicate
the coherence protocol, namely, the TLB shootdown protocol.
On modern architectures, as memory accesses become heterogeneous in terms of latency and throughput, 
it is a common optimization to migrate pages between different memory modules. This process requires updating the 
translation information both in the main memory and cached by the TLB, which frequently involves TLB shootdowns.
Large TLBs can make the performance worse due to the shootdown overhead.

The paper noted that previous proposals attempted to solve this issue from different directions. 
Virtual hierarchy uses virtual addresses, instead of physical addresses, to avoid paying the cost of translation
on the critical path. Addresses are only translated when accesses are bring made external to the virtual hierarchy.
This approach, however, suffers from synonym and homonym, which are caused by one physical address (PA) being mapped
by multiple virtual addresses (VA) (i.e., page sharing between address spaces), and one VA being mapped to different 
PAs, respectively.

Other attempts have also been made with single address space OS and huge pages. The former requires significant
changes to today's programming paradigm and OS interface, which is unrealistic. The latter, despite the fact that
it is quite mature and has been already deployed, still causes issues such as fragmentation and alignment problems.

Midgard, on the other hand, decouples semantics level process isolation with physical level resource management,
which are two independent functionalities coupled together in today's existing virtual memory system. 
There are several design highlights.

