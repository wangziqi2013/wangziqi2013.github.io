---
layout: paper-summary
title:  "Hardware-based Always-On Heap Memory Safety"
date:   2023-01-14 01:52:00 -0500
categories: paper
paper_title: "Hardware-based Always-On Heap Memory Safety"
paper_link: https://ieeexplore.ieee.org/document/9251969
paper_keyword: AOS; Allocator; malloc; Memory Safety
paper_year: MICRO 2020
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper proposes Always-On Memory Safety (AOS), a software-hardware mechanism for ensuring memory access integrity
by embedding bound information in unused bits of virtual address pointers. The design is motivated by the existing 
memory safety mechanism in ARM ISA and further extends the ISA to support integrity check of heap memory accesses. 
Compared with prior works, AOS minimizes the overhead of memory safety checking by performing them on hardware and 
by using relatively simpler addressing schemes for memory bound metadata.

The paper is motivated by the increasingly obvious trend that heap attacks have become the mainstream of memory
safety attack due to the effectiveness of protection methods against stack-based attacks. In particular, the paper
named three heap-based attacks that are rapidly gaining popularity, i.e., heap corruption, out-of-bounds read, and 
use-after-free. The paper also noted that prior hardware proposals for solving the problem are unsatisfactory 
for five reasons. First, many prior works require extending registers that hold pointer values with extra metadata 
bits, hence forming what is called "fat pointers". The proposed design will, however, incur radical changes to the 
core pipeline and increase power consumption of the processor.
Secondly, most prior works also require an explicit bound checks instruction before every memory operation, which
unfortunately causes an non-negligible increase in the number of instruction executed and brings large instruction 
overhead even if the checks are themselves very fast. Similarly, when performing pointer arithmetics and assignments,
these proposals also need explicit instructions to propagate the per-pointer metadata, which further exacerbate the 
design's runtime overhead. 