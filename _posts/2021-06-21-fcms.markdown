---
layout: paper-summary
title:  "A Space-Efficient Compressed Cache Organization for High Performance Computing"
date:   2021-06-21 23:48:00 -0500
categories: paper
paper_title: "A Space-Efficient Compressed Cache Organization for High Performance Computing"
paper_link: https://link.springer.com/chapter/10.1007%2F978-3-540-30566-8_109
paper_keyword: FCMS; Cache Compression; Memory Compression
paper_year: ISPA 2004
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper proposes Fine-Grained Compressed Memory System (FCMS) as an improvement over a previous proposal SCMS.
The authors noted that while SCMS reduces memory bandwidth and effective cache capacity, the maximum compression
ratio is limited to two, due to the fact hat SCMS only compresses adjacent even-odd blocks into the same data slot.
The paper observes that with a moderately good compression algorithm, many cache blocks can be compressed to less
than 50% of the original size, which causes storage under-utilization, as blocks compressed to less than 50% 
of the original size will leave unused storage in the data slot (which is called internal fragmentation by this paper).

FCMS differs from SCMS by assigning multiple size classes to compressed blocks, rather than only having two 
(i.e., uncompressed, and half-sized). Compressed block sizes are assigned with different "size buckets". The paper
proposes using 16 buckets, meaning that for 64-byte cache blocks (the paper seems to suggest using 128-byte blocks,
but it does not affect our discussion), compressed blocks between size 4i and (4i + 3) will be assigned to bucket i.
Cache metadata is also organized such that compressed blocks can occupy a variable number of data buckets in the 
data array, allowing a more flexible management of cached data. 

FCMS is based on SCMS. SCMS is a unified compressed LLC and memory design, in which blocks are transferred between the
LLC and the DRAM in compressed form on block fetch and eviction. SCMS only attempts to compress adjacent even-odd 
blocks individually, and store them in the same 64-byte data slot. 
On the LLC side, SCMS manages compressed entries as super-blocks of size two, meaning that a tag entry stores the
tag of the even numbered block, plus an extra bit to indicate whether the odd numbered block is also present in
compressed form. Metadata such as dirty bits, and coherence states are duplicated on each tag entry as if there were 
two logical blocks per entry (replacement entries are not duplicated, though, as both blocks in the tag are always 
evicted together). 

SCMS also skews the index generation function of blocks, such that block 2i and (2i + 1) can be stored in both 
sets computed from address 2i and (2i + 1) (these two sets are adjacent if the index generation function just uses
lowest few bits of the block address). On a cache lookup, both sets need to be probed. This essentially doubles the 
associativity of SCMS cache.

SCMS manages uncompressed and compressed blocks on DRAM in the granularity of pages. Two size classes are supported,
namely full sized pages and half sized pages. In half sized pages, all even-odd pairs are stored in compressed form.
In full sized pages, some blocks are stored in uncompressed form. Both uncompressed blocks and compressed pairs are
aligned to 64-byte boundaries for easy index generation. 
A bit vector in the page table entries for full-sized pages describes the data layout of the page, which is used
to compute block offsets on an access request.
The OS maintains a pool of both size classes, and is responsible for allocating pages, performing data migration on 
size class change, and maintaining page table entries.

FCMS uses a different cache and DRAM page organization.
On the cache side, FCMS adopts the super-block based index generation for less metadata bits dedicated to address tags.
Each entry only has one address tag, but three super-block offsets tags that encode three arbitrary addresses
within the super-block.
The super-block size is 16, meaning that 16 aligned and consecutive blocks on the physical address space are mapped to 
the same set.
Given a block address, the index generation function selects the middle few bits as the set index, while outputting the 
higher bits as the tag, and the lower four bits as the offset. 
Both tag and offset are compared against the requested address on lookup operations. 
Per-block metadata states are duplicated three times, such that each tag entry encodes at most three logical blocks.
FCMS does not use skewed index generation.

FCMS does not decouple data slots from tag entries, indicating that there is still one-to-one correspondence between 
tag entries and the data store for addresses encoded by the entry.
Data slots are segmented into buckets for storing variable sized compressed blocks. Blocks must be stored in
consecutive buckets, and all blocks in the same tag entry are stored compactly, i.e., there must be no external 


