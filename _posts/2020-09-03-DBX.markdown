---
layout: paper-summary
title:  "Bit-Plane Compression: Transforming Data for Better Compression in Many-Core Architectures"
date:   2020-09-03 22:19:00 -0500
categories: paper
paper_title: "Bit-Plane Compression: Transforming Data for Better Compression in Many-Core Architectures"
paper_link: https://dl.acm.org/doi/10.1109/ISCA.2016.37
paper_keyword: Bit-Plane Compression; Compression; GPGPU
paper_year: ISCA 2016
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

**Highlight:**

1. Good observation that preceding zeros in delta-based compression can be utilized in a better way by using bit-planes.
   More zero bits can be extracted and placed together this way, resulting in higher compression ratio.
  
2. Also good observation that occasional "abnormal" values will result in two consecutive ones in the bit-plane words,
   which is compressed using a special code.

**Lowlight:**

1. The paper is poorly organized. There is neither overall picture of what the algorithm attempts to achieve, nor
   a detailed description of how compression is performed.
   I read seven pages, and most of them are just related work (which I already know) and observations by running 
   different workloads (not even interesting, all expected).

2. The paper also failed to mention that this algorithm is only applicable to 128B blocks, since there has to be 32
   words to form 32-bit code words after bit-plane rotation.
   Although the paper did mention that this algorithm is targeted at GPGPU which may have larger cache blocks
   due to the regular access pattern.

3. The paper also does not summarize what kind of inefficiencies in previous approaches it solves. At least give
   a comparison with BDI like what I did in this paper summary.

4. The claim that one abnormal value will result in two consecutive bits in the code words is over-simplified.
   Imagine four consecutive words before compression: 0000...001, 0000...001, 0001...001, 0000...001.
   (i.e., the third value is abnormal by having a "1" high bit). 
   After taking delta we will get the sequence:
   0000...000, 0001...000, 1111...000.
   In this case, the code word after flipping the bit-plane will be:
   ...001..., ...001..., ...001..., ...011..., ..., ...000..., ...000..., ...000....
   After the XOR operation, the results will be:
   ...001..., ...000..., ...000..., ...010..., ..., ...???..., ...000..., ...000....
   So actually, the results will be only one "1" bit, instead of two.

This paper proposes Bit-Plane Compression, a data compression algorithm for better compression ratio. Conventional
compression algorithms, such as Base-Delta-Immediate (BDI), may take advantage of value locality of adjacent words
by subtracting the value from its neighbor. Since values are expected to be close to each other, these deltas are 
small, such that only a few bits is sufficient to store them, achieving the goal of compression that fewer bits are 
used to encode the same information.

Although the paper did not point this out, conventional algorithms such as BDI have a few issues which limit their 
compression ratio. First, BDI is not always optimal in terms of reducing the number of bits requires to store a 
delta value. Theoretically speaking, BDI is able to compress delta values to the smallest bit length possible by
allowing arbitrarily sized code words. In practice, this is infeasible, because: (1) the bit width of the code words
must also be encoded in the final result; (2) This also puts a heavy burden on compressor circuit to detect all possible
bit lengths. As a result, BDI only supports a limited set of compressed code word lengths, e.g., 8 bits, 16 bits and 32 
bits, which leaves some redundant zero bits in the output code words. In the worst case give the size possibilities above,
if all code words can be encoded with 17 bits, BDI will choose the 32-bit compression scheme, resulting in 15 redundant 
zero bits for each code word.

The second issue with BDI is that it only selects the first value, not the best fitted one, as the base. This is another
design compromise that was made to avoid exhaustively searching for the most appropriate base value. It will, however,
significantly lower the compressibility of the entire cache line, if the first value is not a proper base. This occurs, 
for example, when the array starts mid-line or it is an occasional abnormal value. In this case, all delta values will 
be too large to compress, while still being close to each other and having abundant redundancy.

The last issue is that BDI cannot handle occasional abnormal values well. If such a value occurs, the abnormal delta
will determine the bit width of compressed code word, making compression difficult or impossible. 

Bit-Plane compression avoids the above issues by performing a bit-place transformation after computing deltas. The 
transformation generates a new set of code words, where code word i is comprised of all bits at offset i from the 
delta values. The generated code word will always be zero, if bit i from all delta values are zero, meaning that all
high zero bits can be transformed into value zero, solving the first issue above. In addition, an abnormal value will
result in a few "1" bits in the generated code word. These sparse "1" bits can be encoded with frequent pattern
compression, solving issue three. Issue two is also solved by the same reason, since large delta values
tend to have less alternation on higher bits, given that these deltas are close to each other (i.e., second-order value 
locality), resulting in code words full of ones or zeros.


