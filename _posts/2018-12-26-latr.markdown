---
layout: paper-summary
title:  "LATR: Lazy Translation Coherence"
date:   2018-12-26 20:50:00 -0500
categories: paper
paper_title: "LATR: Lazy Translation Coherence"
paper_link: https://dl.acm.org/citation.cfm?id=3173198
paper_keyword: TLB Shootdown
paper_year: ASPLOS 2018
rw_set: 
htm_cd: 
htm_cr: 
version_mgmt: 
---

This paper proposes LATR, a software TLB coherence scheme that overcomes the overhead of traditional TLB shootdown. 
Software-based TLB shootdown has been widely adopted by Operating Systems as a way of maintaining coherence among 
private TLBs. Just like cache coherence, when a processor modifies the page table either by changing the virtual-to-physical
mapping or by altering the permissions bits in a page table entry (PTE), these modifications need to propagate to 
other processors that have cached a private copy of the PTE to avoid accessing the wrong physical page or accessing the 
page with wrong permission. Past empirical experience suggests that, compared with cache coherence, TLB coherence events 
happen relatively infrequently, e.g. during fork() system call, it is hence by design that hardware does not maintain
the coherence of TLB entries. 

The classical algorithm of enforcing TLB coherence is called TLB shootdown. It takes advantage of Inter-Processor 
Interrupts (IPI) to deliver asynchronous events to remote processors. We describe the shootdown algorithm as follows.
First, the initiator acquires a lock on the page table entry to avoid multiple concurrent modifications and shootdown on
the same entry. Then the initiator builds a list of remote processors according to the usage of the page table. The 
current algorithm that Linux uses is that all processors that have used the page table will be included in the list.
The list will be stored in a well-known location in the memory, and is accessible to all processors in the system.
The initiator processor then sends IPI to remote processors on the list. On receiving an IPI indicating TLB shootdown,
the remote processor checks the list to see if it is included. If yes, then the receiving processor invalidates 
the TLB entry, and acknowledges the complete of the shootdown operation. In the meanwhile, the initiator spins on 
a set of flags which indicate whether all processors have finished the process. The flag will be set if this is true.
The initiator processor then 