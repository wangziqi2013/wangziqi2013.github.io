---
layout: paper-summary
title:  "Distributed Logless Atomic Durability with Persistent Memory"
date:   2019-12-11 17:54:00 -0500
categories: paper
paper_title: "Distributed Logless Atomic Durability with Persistent Memory"
paper_link: https://dl.acm.org/citation.cfm?doid=3352460.3358321
paper_keyword: NVM; LAD; Memory Controller
paper_year: MICRO 2019
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper proposes Logless Atomic Durability (LAD), a hardware framework for supporting failure atomic transactions in
which no logging is involved for most of the time. The paper identified the problem of software logging as write amplification
and excessive write orderings which require persist barrier to be issued quite often, degrading performance. The paper also 
identifies that hardware schemes, such as Kiln, are making unrealistic assumptions which make the propal less attractive.
For example, Kiln assumes that the LLC is manufactured using STT-RAM and that the LLC can atomically commit a transaction
by performing a battery-backed cache tag walk. Neither of these two assumptions is realistic nowadays. Today's LLC is still
manufactured using SRAM, and is quite unlikely to be replaced by STT-RAM in the near future. Furthermore, Non-uniform
Cache Access (NUCA), which is common on server processors, partitions the LLC into several slices, each maintained by
a separate controller. Atomicity of operations, such as flash-clearing all "speculative" bits, as proposed by Kiln, is
not guaranteed. 

The paper makes the following observation about implementing failure atomicity. First, in a distributed environment 
such as NUCA and/or multi-core, atomicity of operation is not guaranteed, since devices act on their own, and only
communicate through pre-defined interfaces. In order to ensure that all of these devices make the same decision, Two-Phase
Commit (2PC) must be employed to determine the final state of the operation. Second, software logging is expensive, making
hardware assisted failure atomicity an attractive option. Among popular hardware logging designs, the paper points out 
that undo logging fits current NVDIMM the best for the following reasons: 