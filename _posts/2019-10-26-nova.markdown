---
layout: paper-summary
title:  "NOVA: A Log-Strictured File System for Hybrid Volatile/Non-volatile Main Memories"
date:   2019-10-26 23:39:00 -0500
categories: paper
paper_title: "NOVA: A Log-Strictured File System for Hybrid Volatile/Non-volatile Main Memories"
paper_link: https://www.usenix.org/node/194455
paper_keyword: NVM; File System; NOVA; Log-Structured
paper_year: FAST 2016
rw_set: 
htm_cd: 
htm_cr: 
version_mgmt: 
---

This paper presents NOVA, a file system optimized for NVM which provides strong atomicity guarantees. In order for a 
file system operation to be atomic, either all of its sub-operations are committed to persistent storage, or none of them is
committed. This is especially true when the file system suffers from a crash or failure, in which case the persistent
storage may only contain partially updates states, due to the fact that page buffers maintained by the OS or hardware 
caches can evict pages back to the storage at unpredicable times.

As a result, several techniques are implemented to prevent these partial updates from corrupting the state of the file 
system, typically via a post-crash recovery process. The first technique is called journaling, in which all modifications
to the file system, including metadata and data, are first written to a persistent journal, and then written in-place.
A write ordering is enforced between the commit of the journal and the actual update of file system states to ensure 
that these operations can always be replayed after the journal has been committed. In the post-crash recovery process, 
if the journal is found to have committed, it will be replayed. The journal can only be removed after all dirty
pages are flushed to the disk. The problem of journaling is that it doubles I/O traffic to the disk, since both the journal
and the data need to be persisted. The second technique is shadow paging, which is commonly used in tree-structured file
systems. In such a file system, it is assumed that directories and files are organized into a search tree, such that there
is only one pointer to a page. When a page is to be updated, it is first duplicated by copying all contents of the 
page to another page, and all modifications are performed on the new page. Non-atomic modifications to the page are
committed by an atomic compare-and-swap to the parent of the page. In this scheme, any change made on any level
of the tree will propagate to the root, since when we modify the pointer on the parent node, a new copy of the parent
node is also created and then swapped into the grandparent node. This cascading effect unnecessary memory traffic and 
can be expensive. 