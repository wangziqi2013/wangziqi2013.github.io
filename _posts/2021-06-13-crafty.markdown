---
layout: paper-summary
title:  "Crafty: Efficient, HTM-Compatible Persistent Transactions"
date:   2021-06-13 20:10:00 -0500
categories: paper
paper_title: "Crafty: Efficient, HTM-Compatible Persistent Transactions"
paper_link: https://dl.acm.org/doi/10.1145/3385412.3385991
paper_keyword: NVM; HTM; Crafty; TSX/RTM
paper_year: FAST 2021
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper proposes Crafty, a novel software transaction memory design based on re-execution. The paper begins 
by observing that all previous designs have non-negligible run-time costs that root deeply into the methodology.
The paper investigates into three typical mechanisms: undo logging, redo logging, and shadow paging.
Undo logging requires write ordering between the log entry and the data block being written. As a result, each
write operation must be preceded by log generation and persistence, which has a large overhead since the log 
flush uses what is called a persist barrier. The barrier, which typically consists of several cache flush
instructions followed by a store fence (clwb and sfence on x86), stalls the pipeline for at least the amount
of time required for a round-trip between the cache hierarchy and the NVM controller, which is usually a few
hundreds of cycles, causing performance degradation.

Redo logging, on the other hand, does not require per-operation write ordering. As long as dirty data is written
in-place after the transaction commits (which can be implemented as write ordering between all dirty blocks
and the commit mark, but in practice, it is usually implemented as shadowing the objects in volatile memory),
no extra write ordering is enforced. The paper points out, however, that redo logging needs read operations 
to also check the read log in order to access the most up-to-date value written by the transaction, 
incurring a non-negligible overhead for reads. Since reads are more common than writes in most workloads, the
overall performance may still be affected (again, this can be avoided by shadowing objects to volatile memory).