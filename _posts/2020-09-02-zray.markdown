---
layout: paper-summary
title:  "Z-Rays: Divide Arrays and Conquer Speed and Flexibility"
date:   2020-09-02 04:11:00 -0500
categories: paper
paper_title: "Z-Rays: Divide Arrays and Conquer Speed and Flexibility"
paper_link: https://dl.acm.org/doi/10.1145/1806596.1806649
paper_keyword: Array; ZRay; Data Structure
paper_year: PLDI 2010
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper presents Z-Rays, a discontinuous array implementation featuring GC-friendliness and storage advantages.
As one of the most commonly used data structures in computer programming, arrays have long been implemented as a large,
continuous chunk of memory, which can be linearly addressed given an index value. This simple design, however,
has a few disadvantages when the array becomes large. First, large array objects require a big chunk of virtual address,
which may become an issue for managed languages, where background garbage collection (GC) threads may need to copy
object around during GC. Large objects will, therefore, affect GC performance by introducing huge object copy overhead.
In real-time platforms, such unpredicable background activity will affect the timeliness of operations, making the 
system less reliable. Second, allocating large chunks will introduce fragmentation on the address space, especially if 
multiple large chunks are present, lowering the utilization of allocator memory. In addition, most allocators are tuned 
for allocating small objects, not large chunks. Lastly, some big arrays are sparse, containing mostly zeros. In this
case, storing all these zeros in a consecutive chunk both wastes memory, and unnecessarily increases the memory footprint.

Z-Rays addresses the above problems by using uniformly sized, discontinuous and smaller chunks as the data store,
which is organized into a two-dimensional array for fast access. The array itself is allocated as a wrapper object, 
called the "spine", which contains the array of chunks and other metadata, such as the number of elements.
Note that Z-Rays only implements static array, i.e., arrays whose sizes are statically known, and will not expand
or shrink. As a result, the size of the array can also be known at compilation time, given a fixed chunk size.
The chucks, called "arraylets", are smaller arrays whose size is a compilation time constant. Array elements are 
still linearly mapped within a chunk, while at Z-Ray level, at most one indirection is required to access an element.

We next describe the baseline Z-Ray. In the baseline, given an array size of N, and arraylet size of M (in the number of 
elements), the spine wrapper object is allocated as an array of lower\_bound(N / M) chunk pointers, with each pointer
referencing an conventional array of size M. In addition, the remaining (N % M) elements are inlined at the end of the 
spine, if N is not a multiple of M. Z-Ray chooses not to store them as a smaller arrarlet or a partially full arraylet
in order to: 