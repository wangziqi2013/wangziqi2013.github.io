---
layout: paper-summary
title:  "EXCITE-VM: Extending the Virtual Memory System to Support Snapshot Isolation Transactions"
date:   2021-02-10 20:35:00 -0500
categories: paper
paper_title: "EXCITE-VM: Extending the Virtual Memory System to Support Snapshot Isolation Transactions"
paper_link: https://dl.acm.org/doi/10.1145/2967938.2967955
paper_keyword: Virtual Memory; STM; SI-TM; EXCITE-VM
paper_year: PACT 2016
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper presents EXCITE-VM, a software-based virtual memory extension that enables snapshot isolation semantics
for individual threads.
The paper is motivated by two observations. First, multicore programming for non-regular data structures, such as 
graphs, are non-trivial as frequent thread synchronization is required to avoid data corruption. Besides, reliability
may also be a concern in a multi-threaded environment if threads may fail due to invalid operations or accesses.
Second, although Software Transactional Memory (STM) is a suitable programming paradigm for multicore synchronization,
they often require a software indirection layer for multiversioning semantics. The indirection layer needs to be 
invoked on every load and store instructions, which adds extra cycle and data overhead to the original application.

EXCITE-VM addresses the above two issues using Snapshot Isolation (SI) abstraction provided by virtual memory systems. 
To simplify thread synchronization, each thread in EXCITE-VM reads from a consistent snapshot that is only determined 
by the begin timestamp of the thread's transaction, which remains unaffected by concurrent threads that commit onto
the actual memory image. In addition, the virtual memory system, which is a built-in address translation mechanism,
is taken advantage of to provide a per-thread execution context in which data pages would reflect the memory image 
of a certain time point, rather than the most up-to-date per-process image.

EXCITE-VM relies on the SI semantics between threads. SI semantics mandates that threads read a consistent image of 
memory which is fixed at some time during the execution. Here "consistency" means that the memory image should be
the result of some legal execution order of committed transactions at the time of transaction begin. After transaction
begin, the consistent image will not be affected by concurrent committing transactions writing into the global image.
Besides, SI also requires that the committing transaction must not have write-write conflicts with an interleaving
transaction, meaning that the write set should either be constantly monitored against concurrent commits, or the 
write set should be validated against the write set of committed transactions before the commit point. EXCITE-VM
adopts the latter approach for less inter-thread communication.

In a conventional Linux process, threads are maintained just like regular processes, with each thread having a 
standalone control block. In a normal application, all threads share the same page table (the pointer of which
is stored in CR3 register), enabling them to have the same view of memory. EXCITE-VM breaks this invariant by
assigning each thread an individual page table, such that different threads may see different values at the same
memory address, depending on the snapshot these threads are accessing. 
All threads in an application starts from a common base image serving as the starting point of execution. The 
image each thread accesses deviates from each other as transactions commit and new transactions begin. Before a
transaction begins on a thread, the thread's page table is re-initialized such that all entries are invalid.
During thread execution, when a page is accessed for the first time, a page fault would occur as a result of 
accessing an address with invalid page table entry. The EXCITE-VM page fault handler then constructs the proper
view of memory using the timestamps of the requesting transaction and the committed values by earlier transactions 
that the current transaction is supposed to see.
