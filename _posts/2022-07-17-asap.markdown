---
layout: paper-summary
title:  "ASAP: Architecture Support for Asynchronous Persistence"
date:   2022-07-17 02:11:00 -0500
categories: paper
paper_title: "ASAP: Architecture Support for Asynchronous Persistence"
paper_link: https://dl.acm.org/doi/10.1145/3470496.3527413
paper_keyword: NVM; ASAP; Asynchronous Commit; Undo Logging
paper_year: ISCA 2022
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

**Highlights:**

1. Persistent transactions should be committed to the NVM image following both control dependency and data dependency.
The former occurs when the same thread starts transactions. The latter occurs on RAW and WAW sequences from two
different transactions on different threads (Note: WAR is not observed). 
These dependencies are essential for the recovered state to remain valid.

2. Dependency can be tracked by a per-cache line owner tag to indicate the most recent writer of the line. 
All later readers or writers establish data dependency with the first writer, and should be only committed
after the first writer commits.

3. When dependency is established, the memory controller stores the dependencies in a dependency list,
essentially building an DAG indicating the commit order. Persistent transactions are committed following this DAG's
topological sort order.

4. Order or commits of undo-logging transactions can be enforced by controlling the order that the undo logs are 
deleted. A transaction with its undo log still not deleted will be undone during recovery
regardless of its data and log persistence progress.

**Comments:**

1. I wonder whether control dependency should be strictly followed (as ASAP does). Imagine two transactions 
on the same thread, one of them writes location X, the other one writes location Y. These two transactions have no
dependency and can be committed entirely out-of-order. It does not matter whether one of them gets lost while the other
one is undone during recovery.
On the other hand, the persistency model assumed by this paper might be that the recovered state should be 
one that conforms to the logical ordering, which indeed requires control dependency to be followed.

This paper proposes ASAP (which stands for Architectural Support for Asynchronous Persistence), a persistent
transaction framework combining undo-logging and asynchronous transaction commit.
The paper is motivated by the relatively inefficient commit process of undo-logging based transactions. 
With undo-logging, two store orderings must be observed. The first is the ordering between log entry and 
dirty data item, such that undo log entries must be persisted before the corresponding dirty data item does.
The second is the ordering between dirty data and transaction commit, such that all dirty data
generated by the transaction should be persisted before the transaction logically commits.

