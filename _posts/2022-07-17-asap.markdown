---
layout: paper-summary
title:  "ASAP: Architecture Support for Asynchronous Persistence"
date:   2022-07-17 02:11:00 -0500
categories: paper
paper_title: "ASAP: Architecture Support for Asynchronous Persistence"
paper_link: https://dl.acm.org/doi/10.1145/3470496.3527413
paper_keyword: NVM; ASAP; Asynchronous Commit; Undo Logging
paper_year: ISCA 2022
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

**Highlights:**

1. Persistent transactions should be committed to the NVM image following both control dependency and data dependency.
The former occurs when the same thread starts transactions. The latter occurs on RAW and WAW sequences from two
different transactions on different threads (Note: WAR is not observed). 
These dependencies are essential for the recovered state to remain valid.

2. Dependency can be tracked by a per-cache line owner tag to indicate the most recent writer of the line. 
All later readers or writers establish data dependency with the first writer, and should be only committed
after the first writer commits.



**Comments:**

1. I wonder whether control dependency should be strictly followed (as ASAP does). Imagine two transactions 
on the same thread, one of them writes location X, the other one writes location Y. These two transactions have no
dependency and can be committed entirely out-of-order. It does not matter whether one of them gets lost while the other
one is undone during recovery.
On the other hand, the persistency model assumed by this paper might be that the recovered state should be 
one that conforms to the logical ordering, which indeed requires control dependency to be followed.
