---
layout: paper-summary
title:  "UNified Instruction/Translation/Data (UNITD) Coherence: One Protocol to Rule Them All"
date:   2018-12-24 19:04:00 -0500
categories: paper
paper_title: "UNified Instruction/Translation/Data (UNITD) Coherence: One Protocol to Rule Them All"
paper_link: https://ieeexplore.ieee.org/document/5416643
paper_keyword: TLB; Coherence; TLB Shootdown
paper_year: HPCA 2010 
rw_set: 
htm_cd: 
htm_cr: 
version_mgmt: 
---

This paper presents UNITD, a unified mechanism for maintaining coherence for caches and the Translation-Lookaside Buffer 
(TLB) using the classical cache coherence infrastructure. Traditionally, TLB are not maintained coherent by the hardware,
unlike the cache. There are three reasons. The first is that although cache coherence are important in most cases, as data 
sharing between processors are very common, TLB entries, on the other hand, are only invalidated when the underlying page 
table entries (PTEs) are modified. Maintaining coherent TLB across processors hence may not justify the extra hardware and 
design efforts in order to implement it. In addition, TLB modifications can be classified into "safe" and "unsafe". "Safe" 
modifications are those that initializes an invalid virtual address (VA), or that the permission is lowered. In these two 
cases, the modifying processor does not have to notify other processors that the change has been made. This OS handles
this lazily: when the exception is raised by other processors when they access the page using their out-of-date private TLB
entries, the OS detects that the exception is spurious after checking the PTE, in which case no further action is taken
besides simply updating the TLB entry. For "unsafe" modifications, however, the OS must always invalidate potentially
cached PTE entries in remote TLBs. The last reason is that since TLB coherence is already well-handled by existing
software, i.e. Operating Systems, even if hardware coherence is implemented, people would be reluctant migrating to the 
new method, because the old approach works very well. 

The software approaches that maintains TLB coherence are called "TLB shootdown". A TLB shootdown algorithm generally involves
one processor setting up a list of sharers for a certain PTE, and trriggering Inter-Processor Interrupts (IPI) to all sharers.
Sharers of the PTE will invalidate the corresponding TLB entries, and remove themselves from the list. Once all entries have been
removed, the initiator processor could proceed to modify the page table entry. A lock per PTE is also acquired during 
the modification process to synchronize processors that wish to moidify the same entry.

The trend that software TLB coherence is sufficient, however, is likely to fade out in the coming years as more and more 
cores are integrated onto the chip. The study conducted by this paper using both synthetic workloads and real-world applications  
suggests that, as the number of cores keep increasing, the performance impact of software TLB shootdown becomes more 
significant. The paper also suggests that using existing hardware infrastructure for cache coherence to enforce 
coherent TLBs is a feasible choice. We describe the details as follows.


