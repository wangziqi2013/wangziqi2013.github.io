---
layout: paper-summary
title:  "MaaT: Effective and Scalable Coordination of Distributed Transactions in the Cloud"
date:   2018-12-19 00:01:00 -0500
categories: paper
paper_title: "MaaT: Effective and Scalable Coordination of Distributed Transactions in the Cloud"
paper_link: http://www.vldb.org/pvldb/vol7/p329-mahmoud.pdf
paper_keyword: MaaT; Concurrency Control; OCC; Interval-Based CC
paper_year: VLDB 2014
rw_set: Software
htm_cd: N/A
htm_cr: N/A
version_mgmt: N/A
---

This paper proposes a distributed concurrency control protocol that uses interval-based validation. 
Transactions are logically ordered by timestamps, which are integers whose value denote the serialization order of
transactions. Each transaction in the system has two timestamps: A lower bound (lb) which represents the lowest time the 
transaction could commit, and correspondingly a higher bound (ub) which represents the largest time the 
transaction could commit. As the transaction reads or writes data items, the CC manager adjusts both lb and ub, such
that the ordering between the current transaction and other transactions are consistent with read and write 
operations. At any time during the execution, if the transaction's lb and ub crosses, i.e. the lb is larger than
the ub, then an ordering conflict is detected, because there is no serial schedule that allows the current 
transaction to be properly ordered with other transactions based on the existing execution history. The current 
transaction must abort and roll back all changes it has made and retry. If at the end of the transaction, 
the interval [lb, ub) is still valid, the CC manager picks an arbitrary timestamp in this range as the commit 
timestamp (ct) of the transaction, and commits all changes. Data items are tagged with two timestamps: A
read timestamp (rts), indicating the largest committed transaction that read this item, and a write timestamp (wts),
indicating the largest committed transaction that wrote this item. Both timestamps are updated when a 
transaction commits.

