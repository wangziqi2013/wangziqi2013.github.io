---
layout: paper-summary
title:  "Trident: Harnessing Architectural Resources for All Page Sizes in x86 Processors"
date:   2022-07-30 12:44:00 -0500
categories: paper
paper_title: "Trident: Harnessing Architectural Resources for All Page Sizes in x86 Processors"
paper_link: https://dl.acm.org/doi/pdf/10.1145/3466752.3480062
paper_keyword: TLB; Huge Page; Virtual Memory; Trident; THP
paper_year: MICRO 2021
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper presents Trident, an OS kernel mechanism that enables 1GB huge pages for general applications.
The paper is motivated by the fact that today's processor's 1GB huge page support is largely wasted due to not being
used in most applications. Meanwhile, users are still penalized even if the support is not enabled because of 
the hardware resource dedicated to it.
The paper proposes a software mechanism that enables applications to leverage 1GB huge pages for better performance,
with a combination of techniques to ensure that large 1GB addresses can be efficiently found.

The paper points out that there are currently two ways of leveraging huge pages. 
First, huge pages can be mapped explicitly using a helper library, most notably libHugetlbfs, and the OS will set up
the mapping eagerly by allocating 2MB or 1GB chunks or physical memory, and mapping the corresponding virtual
addresses to it.
Second, huge pages may also be leveraged in the background by an OS kernel thread compacting data pages into 2MB
chunks, and then mapping user space memory using 2MB huge pages whenever it is possible.
This approach is implemented in the Linux kernel as Transparent Huge Page (THP), but only 2MB huge pages are supported.

