---
layout: paper-summary
title:  "Lelantus: Fine-Granularity Copy-On-Write Operations for Secure Non-Volatile Memories"
date:   2020-12-25 17:21:00 -0500
categories: paper
paper_title: "Lelantus: Fine-Granularity Copy-On-Write Operations for Secure Non-Volatile Memories"
paper_link: https://ieeexplore.ieee.org/document/9138980
paper_keyword: NVM; CoW; Virtual Memory
paper_year: ISCA 2020
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

**Lowlight:**

1. The design is not even remotely related to NVM and security. Essentially it just proposes adding extra per-page
   metadata bits to track copy status for every COW'ed page.

2. There are lots of writing inconsistencies and typos in the second half of the paper. For example, on section 4
   page 7, left bottom, it is stated "three CoW commands in the memory controller: page copy, page phyc and
   page init.", while on the same page, right column, table 2, the three commands become page\_copy, page\_phyc
   and page\_free. Page\_init is in fact never discussed, which I believe should be a typo of page\_copy.
   On page 7, section 4B, it should be "stale data" not "stall data".
   On page 8, section 4C, it should be "traverse", not "transverse".
   On page 9, second line of the left column, it should be "rely on", not "relay on".

This paper proposes Lelantus, a hardware virtual memory optimization for Copy-On-Write (COW) operations.
The paper has observed that COW is a commonly used technique by the OS to delay the actual copy of physical pages
when forking a process. The page will remain in read-only mode until the first write by either of the two processes,
at which time the page is duplicated, and the write is performed on the new copy. The virtual address mapping 
for the writing process is also updated to point to the newly copied page. 
On application level, the paper also identifies several important use cases of COW feature of the OS, including 
normal fork() system calls, memory allocation where newly allocated pages are mapped to a zero page and lazily
populated on the first write, virtual machine deduplication, and application address space checkpointing.

The paper recognizes two performance related drawbacks of performing full COW on the first write. First, the first
store operation into such a page will incur much larger performance overhead than the rest of writes, causing 
performance fluctuation, which makes it harder to predict the performance of write operations. This is particularly
bad in time-sensitive applications with QoS guarantees or real-time systems where the predicatability of timing
matters even more than the latency of operations.
Second, if the page is only written sparsely, especially on systems with huge pages, the write amplification would
be high, since most of the lines copied during COW will not be written later, causing excessive but unnecessary write
bandwidth, and, even worse, shortened device lifetime if on NVM.

The paper proposes adding per-page and per-cache line metadata to help allieviating the overhead of COW. Fine-grained
metadata is added to track two pieces of information for a destination COW page: (1) Whether each cache line in the 
page has been copied, i.e., whether they still refer to the source page's read-only data; (2) The address of the 
source page. Note that under Lelantus's model, the source and destination pages are no longer of equal status.
Instead, after the logical duplication, one page is delegated as the source page, which is responsible for providing 
read-only data to readers of both pages. The other page is the destination page, which has "holes" punched on it.
Read operations to these holes will be forwarded to the associated source page, while write operations will invoke
cache line granularity COW.
