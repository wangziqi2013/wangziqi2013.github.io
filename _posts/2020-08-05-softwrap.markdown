---
layout: paper-summary
title:  "SoftWrAP: A Lightweight Framework for Transactional Support of Storage Class Memory"
date:   2020-08-05 18:53:00 -0500
categories: paper
paper_title: "SoftWrAP: A Lightweight Framework for Transactional Support of Storage Class Memory"
paper_link: MSST 2015
paper_keyword: NVM; SoftWrap; Redo Logging
paper_year: 
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper introduces SoftWaRP, a software framework that supports atomic transactions on NVM. The paper sets the goal
of SoftWaRP as providing durability and atomicity to user applications in a system equipped with NVM. Without special
support, neither durability and atomicity is supported by the naive memory interface of NVM devices. On one hand, 
dirty data written by store instructions will be buffered by the cache hierarchy, which may not reach the NVM before
a crash. On the other hand, uncontrolled, arbitrary evictions can also happen during the execution of a transaction, breaking 
atomicity if data is only partially updated when a crash happens.

SoftWaRP differs from previous designs by using a combination of redo logging and shadowing. In conventional redo
logging, two write ordering must be enforced. First, redo log entries must be persisted to the NVM before the commit
record. Second, in-place updates of data must only be persisted to the NVM after the commit record is written. The
first write ordering can be realized by simply executing a persist barrier before and after writing the commit record,
which signals the logical commit of the transaction. The second write ordering, however, is difficult to achieve on today's
hardware, since if cache lines are updated in-place, they will be buffered by the cache hierarchy, the eviction of which
cannot be controlled by software. Previous hardware approaches either force the cache controller to hold back evictions
of such lines before transaction commit, or redirect them to an alternate, "shadow" location to avoid destroying the 
pre-transaction image. Software approaches, on the other hand, will not update data in-place until transaction commit. 
As a compensation, read operations to committed data must check the redo log in addition to the original location.
Some background threads must also periodically checkpoint the redo log to the NVM image for ease of access. 

SoftWrAP combines shadowing and redo logging to reduce the overhead of log traversal as in software approcahes described
above. In addition to generating the redo log entry when data is written during a transaction, the software library also
copies dirty data to a DRAM buffer. The DRAM buffer is indexed by a hash table which can be accessed in constant time. 

