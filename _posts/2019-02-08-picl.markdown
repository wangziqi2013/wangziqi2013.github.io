---
layout: paper-summary
title:  "PiCL: A Software Transparent, Persistent Cache Log for Nonvolatile Main Memory"
date:   2019-02-08 18:44:00 -0500
categories: paper
paper_title: "PiCL: A Software Transparent, Persistent Cache Log for Nonvolatile Main Memory"
paper_link: https://parallel.princeton.edu/papers/micro18-nguyen-picl.pdf
paper_keyword: NVM; Undo; Logging; PiCL; Checkpoint
paper_year: MICRO 2018
rw_set: 
htm_cd: 
htm_cr: 
version_mgmt: 
---  

This paper proposes PiCL, a novel architecture for supporting main memory checkpoints using NVM. Checkpoints are consistent 
main memory images that can be restored after power failure. In this paper, it is assumed that the execution of 
all processors in the system is divided into "epoches". Epoches are also the basic unit of recovery: At recovery time,
the main memory state is restored to the beginning of one of the previously saved epoches. The paper also assumes
that the entire system is backed by NVM connected to the memory bus, through which persistent data can be read or 
written using ordinary processor load and store operations. Processors access the NVM in the same way as they access
the DRAM. After the crash, all volatile state such as processor register file and cache content will be lost. Data
stored in NVM, as its name suggests, can survive crashes and be used for post-failure recovery.

Undo and redo logging are the two most typical ways of performing recovery. Both methods require a centralized log kept
in the NVM, the location of which is either hardcoded in all processors, or is stored in a well-known location on the NVM. 
In the following discussion we assume that logging is performed in cache line granularity as metadata is maintained per
cache line. With undo logging, processors only save the undo image, which is the value of the cache line before the modification.
To guarantee recoverability of modifications, two write ordering constranits