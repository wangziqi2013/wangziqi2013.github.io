---
layout: paper-summary
title:  "Bridging the Performance Gap for Copy-based Garbage Collectors atop Non-Volatile Memory"
date:   2023-01-31 03:28:00 -0500
categories: paper
paper_title: "Bridging the Performance Gap for Copy-based Garbage Collectors atop Non-Volatile Memory"
paper_link: https://dl.acm.org/doi/10.1145/3447786.3456246
paper_keyword: Java; Garbage Collection; NVM
paper_year: EuroSys 2021
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper presents an improved Java Garbage Collection (GC) algorithm optimized for Byte-Addressable Non-Volatile
Memory (NVM). The paper is motivated by the performance degradation of Java's default GC algorithm when deployed
on NVM due to NVM's low write bandwidth, especially under random I/O. The proposed algorithm transforms the read/write
pattern of GC, which contains excessive small writes and has bad locality, into large, sequential writes by
leveraging DRAM as an intermediate buffer. Consequently, higher performance can be achieved with the improved algorithm
as GC utilizes NVM more efficiently and hence constitute fewer cycles on the execution critical path.

The paper aims at optimizing the GC algorithm on Java virtual machine which provides a managed execution 
environment where heap allocations need not be explicitly freed by the programmer. Rather, the virtual machine
maintains internal tracking data structures such that objects living on the heap can be automatically deallocated
when they are no longer referenced by the execution context, hence becoming "dead".
While the GC algorithm, called Garbage-First GC or "G1GC", consists of several smaller subroutines to deal with
different cases, the paper focuses on the most common and frequently invoked type of routine which we describe
as follows. The Java heap allocator places objects (regardless of their sizes, unlike a general heap allocator) 
on memory blocks called regions using the simple bump pointer allocation strategy and objects are never explicitly
freed. The JVM maintains two different types of regions, one is the young spaces which contain objects that are 
allocated more recently and have not gone through any GC process. The other type of region is called the old space
which contains regions that have been GC'ed at least once. For every young region, the GC algorithm keeps track of 
a set of objects in the old space, called the remembered set, that holds references to objects in the young space.


