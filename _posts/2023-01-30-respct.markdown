---
layout: paper-summary
title:  "ResPCT: Fast Checkpointing in Non-volatile Memory for Multi-threaded Applications"
date:   2023-01-30 10:41:00 -0500
categories: paper
paper_title: "ResPCT: Fast Checkpointing in Non-volatile Memory for Multi-threaded Applications"
paper_link: https://dl.acm.org/doi/10.1145/3492321.3519590
paper_keyword: NVM; ResPCT; Undo Logging; Memory Snapshot; Epoch-Based Snapshot
paper_year: EuroSys 2022
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper presents ResPCT, a software epoch-based non-volatile memory snapshotting framework. ResPCT protects 
the integrity of shared data from system failures by periodically checkpointing the states of variables to the NVM.
To maximize performance while minimizing programmer effort, ResPCT adopts in-cache line undo logging and leverages
programmers' notations to mark checkpoint boundaries. ResPCT achieves only marginal performance loss while 
providing the benefit of failure atomicity. Compared with prior works, ResPCT also achieves a significant reduction
in runtime overhead due to its in-cache line logging model.

ResPCT aims to provide an epoch-based checkpointing model for lock-based data structures. In the epoch-based model,
the multithreaded execution is divided into non-disjoint intervals, called epochs, and the state of shared data
is persisted to the NVM at the end of an epoch and before the next one starts. On crash recovery, the system finds
the latest persisted epoch and then restores the system state to the one recorded by that epoch. 
ResPCT assumes that the application periodically creates a checkpoint using an interface function it provides.
ResPCT also assumes that the application programmer can explicitly mark the Restart Points (RP) to which the system 
state can potentially be restored. 
In the case of multithreaded applications, this model implies that the checkpoint is taken when all threads reach
the next RP after the checkpoint request is made.
For common use cases such as data structures, the RPs can be easily identified
at some points in the code region that is not within a critical section (as the code within critical sections will 
mutate shared data and leave it in a temporarily inconsistent state). 
Currently, ResPCT only supports critical section-based use cases. Lock-free data structures, for example, are not 
supported because ResPCT's internal logging API is not safe for concurrent invocations.

Prior works that leverage undo logging often exhibit low performance due to the inevitable usage of persist barriers.
A persist barrier consists of one or more cache line flushes or write backs, followed by a memory fence, which maps to
clflush/clwb and sfense on x86 architecture, respectively. Persist barriers are detrimental to performance because 
excessive cache line flushes will contend memory bandwidth with regular operations, and the store fence forces 
the processor pipeline to stall until the flushes are completed. Unfortunately, software implementations of undo logging
often involve one persist barrier per memory write within an epoch, i.e., when a cache block is first time written
in the epoch, the undo log entry is generated and then immediately flushed into the NVM log buffer using a persist
barrier. The actual store can only be performed after the barrier since undo logging enforces the write ordering 
between log write and data write. 

ResPCT gets rid of the excessive persist barrier of undo logging using a technique called in-cache line logging (InCLL).
In ResPCT, persistent variables are wrapped by templates that generate two other implicit variables. The first 
implicit variable is the undo entry of the same type. 
