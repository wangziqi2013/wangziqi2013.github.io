---
layout: paper-summary
title:  "ShortCut: Architectural Support for Fast Object Access in Scripting Languages"
date:   2021-08-25 14:27:00 -0500
categories: paper
paper_title: "ShortCut: Architectural Support for Fast Object Access in Scripting Languages"
paper_link: https://dl.acm.org/doi/10.1145/3140659.3080237
paper_keyword: ShortCut; Virtual Function; BTB
paper_year: ISCA 2017
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper proposes ShortCut, a hardware mechanism for accelerating virtual function invocations for scripting 
languages.
The paper observes that scripting languages, which are often Just-In-Time (JIT) compiled, pay a huge overhead on
virtual function invocations, since these languages support dynamic resolution of function invocation, meaning
that the actual function being called on an object pointer is dependent on the runtime dynamic type of the 
object, which could not be determined statically at compilation time. 
As a solution, the JIT compiler needs to generate dispatch functions that call the corresponding implementation in the 
runtime based on the type of the object.
According to the paper, the dispatch function is a major source of slowdowns, which account for around 22% of the 
instructions being executed in applications.

The paper introduces two types of dispatch functions, i.e., the global dispatch function that handles all function
invocations at all access sites, and in-line dispatchers that only handle a single site.
The responsibility of the global dispatch function is to map object types and access site to the corresponding function
implementation (functions at the same access sites are polymorphic and have the same symbol name).
The mapping is stored globally using a software mapping table, which is queried every time a function is called
at an access site.
To reduce the overhead, the JIT compiler may also generate in-line dispatch functions for each individual access sites 
that cache the result of queries for the particular call site.
The paper shows three possible implementations of in-line dispatch functions.
The first type, inline dispatchers, is essentially a series of "if" statements where each of the clause handles one
type. At the end of the "if" statements, a special function is called to inform the JIT compiler that the type cannot
be matched with the current dispatcher, and the JIT compiler will invoke the global dispatcher to find the mapping, and 
then re-generate the entire function together with the in-line dispatcher.
