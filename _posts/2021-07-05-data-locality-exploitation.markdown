---
layout: paper-summary
title:  "Data Locality Exploitation in Cache Compression"
date:   2021-07-05 03:11:00 -0500
categories: paper
paper_title: "Data Locality Exploitation in Cache Compression"
paper_link: https://ieeexplore.ieee.org/document/8644558/
paper_keyword: YACC; DISH; Dual-Block Compression
paper_year: ICPADS 2018
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

**Comments:**

1. The authors may have used "block" and "slot" interchangeably, which is confusing.
   For example, in Section 3.1 it says "Dual-block compression is attempted when multiple
   **blocks** in the same sector are not compressible into a single
   **block**.". I guess the second "block" should be "slot".

This paper proposes Dual-Block Compression, a YACC-based cache compression technique that leverages inter-block 
redundancy for higher compression ratio.
The paper is motivated by a third type of locality: data value locality, in addition to the well-known spatial and
temporal locality. Data value locality suggests that there is a high chance that values in nearby memory locations 
will contain identical or regular values, as a result of loops in the program.
As a result, explicit dictionary-based algorithms (i.e., dictionaries are generated dynamically based on the 
data pattern and co-located with compressed block data, rather than being implicitly encoded in the compressed block) 
work pretty well on these data patterns, since only a few values are sufficient to encode an entire block.
The paper further notices that the pattern can extend across several memory blocks, making it possible to share the 
same dictionary for these blocks. This approach has a clear advantage of avoiding storing multiple dictionary entries
for each block, potentially achieving a higher compression ratio.

The design presented in the paper is based on YACC, a super-block based compressed cache. 
For simplicity of implementation, YACC uses a coupled tag and data array, meaning that each tag entry is statically
mapped to a 64 byte data slot, and data of logical blocks encoded by the tag entry must be stored in the 
corresponding data slot. Cache blocks are compressed before insertion and decompressed before eviction and access.
Each tag entry encodes one to four logical blocks in the same super-block, which consists of four consecutive blocks 
in the physical address space.
The entry only has one address tag, which is aligned to four-block boundaries, and four copies of status bits, such
that each logical block can still function as an independent block.
The index generation function of the cache is skewed, such that all four blocks within the same super-block are mapped
to the same set. 
In addition, there can be multiple tag entries allocated to the same super-block, if the compressed blocks need to be 
stored in more than one data slots.



