---
layout: paper-summary
title:  "PMTest: A Fast and Flexible Testing Framework for Persist Memory Programs"
date:   2019-10-22 16:31:00 -0500
categories: paper
paper_title: "PMTest: A Fast and Flexible Testing Framework for Persist Memory Programs"
paper_link: https://dl.acm.org/citation.cfm?id=3304015
paper_keyword: NVM, Undo Logging; Testing; PMTest
paper_year: ASPLOS 2019
rw_set: 
htm_cd: 
htm_cr: 
version_mgmt: 
---

This paper presents PMTest, a testing framework for persistent memory programs to detect common bugs such as writes
not being persisted or incorrect write ordering. The paper claims that programming for NVM is difficult, even with pre-built
libraries, for two reasons. First, programmers should track dirty objects, and issue appropriate function calls or instructions
to flush them back to the NVM. Failing to do so will result in objects not being persisted after a crash, which renders the 
object unrecoverable. The second reason is that certain programming paradigm, such as undo logging, requires that the log
entry be persisted on NVM before the object can be modified in-place. This is because there is only very limited control 
over how the cache hierarchy evicts dirty cache lines back to the NVM. If the dirty line reaches the NVM before the log entry
does, then after a crash the dirty line cannot be undone. 

In practice, programmers often deal with NVM with special instruction sequences or library calls. On x86 platform, a "clwb"
(cache line write back) followed by "sfence" (store fence) constitutes what is known as a "persist barrier". The processor 
will stall on the persist barrier until the cache line has been written back to the NVM. Various NVM libraries also provide
capabilities to support persistent objects and/or logging and recovery. These library calls are also use the basic persistent 
barrier as the most fundamental primitive.