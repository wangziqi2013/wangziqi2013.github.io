---
layout: paper-summary
title:  "Yet Another Compressed Cache: A Los-Cost Yet Effective Compressed Cache"
date:   2020-07-17 20:09:00 -0500
categories: paper
paper_title: "Yet Another Compressed Cache: A Los-Cost Yet Effective Compressed Cache"
paper_link: https://dl.acm.org/doi/10.1145/2976740
paper_keyword: Compression; Cache Compression; YACC
paper_year: TACO 2016
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

**Highlight:**

1. Using super blocks to implicitly generate addresses on lookups without adding more tags, since the address of cache lines
   within a super block is easily derived from the base super block address.

2. Using different associativity for 4:1 case and 2:1 or uncompressed case. 4:1 blocks are statically mapped since each block
   can be statically allocated a 16B slot. 2:1 and uncompressed case requires fully associative mapping between block
   ID and physical slot offset since not all blocks in the SB can be allocated physical storage.
   Using different layouts for different SB cases saves some bits for the tag.

**Lowlight:**

1. In understand the motivation of this article as being a compromised design between complicated SCC/DCC and uncompressed
   cache. But without these motivations YACC is just a really common super block compressed cache with little novelty involved.

This article proposes Yet Another Compressed Cache (YACC), a compressed Last-Level Cache (LLC) design that improves over
the previous overly complicated DCC and SCC designs. The paper begins by pointing out that both DCC and SCC designs are
overly complicated and thus difficult to be adopted into commercial systems for several reasons. First, DCC decouples
the static mapping between tag array and data array entries as in the conventional cache, relying on forward and backward
pointers to read data associated with a tag entry and/or locate the tag for given compressed slot. This not only increases
area and power consumption, but also incurrs extra latency on the critical access path. Second, SCC takes advantage of 
different compression ratio of blocks within the same supre block (SB). Ways in the LLC are further divided into smaller
way-groups, with each way-group only eligible for storing compressed blocks in the SB of a certain size class,
called Compression Factor (CF). By dispatching blocks with different CFs to different way groups, the data slot layout 
within a way group for that SB is fixed, which eliminates complicated mechanism for placing compressed blocks in the 
same physical slot, since all slots sharing a physical slot must be of the same CF. In addition, to further eliminate 
the overhead of having to identify blocks in an SB for a physical slot, SCC only maps adjacent blocks of the same CF
to the same physical tag. Non-adjacent blocks, even with identical CFs, will be mapped to different sets in the way group.
Finally, to offset the fact that way group design reduces effective associativity for a certain address, SCC also adopts
the skewed cache design which uses different hash functions in different ways to scatter addresses that would have conflicted
in a set to distinct sets. 
The article argues that, with all three levels of skewness in SCC, the decoder array is much more complicated than in
a conventional cache, increasing design and verification cost. Besides, as with all skewed cache designs, conventional
replacement algorithms cannot be applied, since skewed caches do not honor the concept of sets, set-based replacement 
algorithms such as LRU or RRIP will not work, further complicating the design since a new algorithm has to be implemented.


