---
layout: paper-summary
title:  "Pangolin: A Fault-Tolerant Persistent Memory Programming Library"
date:   2020-02-05 20:33:00 -0500
categories: paper
paper_title: "Pangolin: A Fault-Tolerant Persistent Memory Programming Library"
paper_link: https://www.usenix.org/system/files/atc19-zhang-lu.pdf
paper_keyword: NVM; Pangolin; Redo Logging
paper_year: USENIX ATC 2019
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper proposes Pangolin, a software library providing redundancy and repairing capabilities to existing NVM libraries.
The paper identifies two causes of data corruptions in NVM-based systems. The first reason is hardware error, which can 
be either medium error, or faulty firmware. This type of error can be detected by internal ECC circult, which is reported
to the processor via interrupts. The second reason is software error, which happens when a bug in the library overwrites
a piece of memory it should not have modified. Such type of errors cannot be caught by hardware, since the hardware does
not recognize logical errors in the software level. The goal of the design is to find and correct most errors of these 
two types. The paper also suggests that compared with prior proposals, Pangolin uses less space, is more efficient, 
and ssupports online error detection. 

This paper assumes the collaboration between the hardware error detection mechanism, the OS, and the library. The hardware
replies on ECC bits to detect errors, but cannot fix them. On detection of data corruption, an interrupt called 
Machine Check Exception is raised by the hardware to the processor. The processor forwards the interrupt to the OS, which 
further raises a SIGBUS error to the application. The default SIGBUS signal handler will force the application to exit
to avoid the error being propagated. The OS will also take measures to remap the corrupted hardware page to another physical
location using the ACPI interface. These corupted pages will be marked as "poisoned" by the OS using page protection
mechanism to avoid future reads and writes. Currently all error checking mechanism works on page level, since this is the 
basic unit of memory mapping in most cases.

Pangolin is based on an object level persistence library called `libpmemobj`.