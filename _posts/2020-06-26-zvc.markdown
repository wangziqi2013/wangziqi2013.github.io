---
layout: paper-summary
title:  "Zero-Value Cache: Cancelling Load That Returns Zero"
date:   2020-06-26 20:54:00 -0500
categories: paper
paper_title: "Zero-Value Cache: Cancelling Load That Returns Zero"
paper_link: https://ieeexplore.ieee.org/document/5260542
paper_keyword: Cache; Compression; ZVC; Zero Compression
paper_year: PACT 2009
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

**Highlight:**

1. In a partially inclusive hierarchy as described in this paper, whether or not to probe or bypass the next level
   can be indicated by a bit vector showing whether the block is cached by the next level

**Lowlight:**

1. The architecture in this paper seems fragile and prone to commplicated corner cases and/or coherence anomalies.
   For example, what about the cohrence of the CIB vector?
2. Many important details are missing, i.e. in the vertical ZVC-L1d design, what if only part of the word is zero-filled, 
   but the rest are non-zero? The cache controller must perform a second read to fetch the non-zero values.

This paper proposes Zero-Value Cache (ZVC), an L1 cache extension optimized to accelerate access for zero load values. 
The paper begins by claim that latency of loads are part of the biggest factor that contribute to processor slow down
in some workloads. The paper then points out that a non-trivial portion of loads actually only read value zero, which can
easily be optimized out if these loads could be identified. Cancelling out these critical loads that are supposed to
return zero before they reach the memory hierarchy helps improve instruction throughput and overall performance.

We next describe the organization of the ZVC. ZVC is organized as a set-associative cache, with only tag arrays but no
data. Each tag consists of an address tag, a valid bit, a zero bit vector, and a cache indcator bit (CIB) vector.
The address tag stores the block address for which the entry covers. ZVC does not necessarily use the same block
granularity as L1d and the underlying L2 cache. In fact, larger blocks are preferred to reduce the tag overhead relative 
to effective ZVC size. The valid bit serves the same prupose as in a conventional cache.
