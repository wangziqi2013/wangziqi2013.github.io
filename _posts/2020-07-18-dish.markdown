---
layout: paper-summary
title:  "Dictionary Sharing: An Efficient Cache Compression Scheme for Compressed Caches"
date:   2020-07-18 00:49:00 -0500
categories: paper
paper_title: "Dictionary Sharing: An Efficient Cache Compression Scheme for Compressed Caches"
paper_link: https://ieeexplore.ieee.org/document/7783704
paper_keyword: Compression; Cache Compression; DISH
paper_year: MICRO 2016
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper proposes Dictionary Sharing (DISH), a novel dictionary-based cache line compression scheme with high compression
ratio and low design cost. This paper identifies several issues with previous compressed cache proposals, such as DCC, 
SCC and YACC. First, to simplify storage management within a physical slot, these designs mandate that all cache lines
that share a physical slot must be from the same super block, and must be of the same size class after compression. 
Under such restriction, even if a physical slot still has storage for one compressed line, if the size class of the line
does not match the size class of the slot, the line cannot be stored, casuing space wastage. In the worse case, N tags
have to be allocated for lines in the same super block, if these blocks fall into N distinct size classes.
Second, when a dirty cache line is written back from the upper level, chances are that the compressed size of the new 
line no longer fits into its original physical slot. In this case, the old line's physical slot is invalidated, and 
a new slot is allocated by either evicting existing lines, or performing compaction of existing lines to free some 
storage that was unusable due to external fragmentation. This paper argues that compaction of existing lines is a heavy-weight
task, since it reads out all compressed lines from the dara array, re-aligns them, and writes the compacted block back.
Lastly, despite the fact that these previous schemes perform tagging in super block granularity, which consist of four or 
more regular cache lines, the compression itself is still performed on individual cache lines without any consideration 
of inter-block redundancy or block compaction. In fact, inter-block redundancy within a super block is a good starting 
point for further optimization, as we will see below.

DISH leverages two important observations on value locality. First, value locality not only exists in the same cache
line, but also across adjacent cache lines within the same super block. The number of distinct values is significantly
smaller than the number of words in a super block, potentially enabling a compression method that uses these values
as dictionary, and encodes individual words using dictionary index with shorter code words. 

