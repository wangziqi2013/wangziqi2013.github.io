---
layout: paper-summary
title:  "Memory Deduplication for Serverless Computing with Medes"
date:   2023-01-06 20:36:00 -0500
categories: paper
paper_title: "Memory Deduplication for Serverless Computing with Medes"
paper_link: https://dl.acm.org/doi/10.1145/3492321.3524272
paper_keyword: Serverless; Deduplication; Cold-Start Latency
paper_year: EuroSys 2022
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

**Comments:**

1. My biggest concern is that, as the paper points out, two major sources of redundancy are shared libraries and 
opened files. In the former case, there is nothing to deduplicate as the OS effectively deduplicates them. In the 
latter case, the content of the file may have already been loaded into the OS page cache and is used by another
thread. These two cases seem to involve great complications as they have to be dealt with in the kernel.
I understand that the Medes design uses CRIU for checkpointing and restoration, which may already have solutions
for the above scenarios, but I am still curious to learn how they are done from a high level. 

2. It also seems to me that Medes is most effective for data segment and heap memory since they contain private 
memory that no other process may share. In the case of shared memory (page cache, shared library), the OS already
does a good job deduplicating them.

This paper presents Medes, an in-memory deduplication module that enables fast startups of serverless functions.
Medes is built based on the observation that serverless functions running on a cluster often share identical or 
similar pages, which can then be leveraged for deduplication. The deduplicated function instances consume less 
memory and can hence be preserved in the memory in a warm state for a longer period without causing memory pressure. 
Medes achieves this design goal by using process checkpoints and fingerprint hashing to identify similarities between
process images. 
