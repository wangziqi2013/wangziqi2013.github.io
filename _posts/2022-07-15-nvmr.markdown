---
layout: paper-summary
title:  "NvMR: Non-Volatile Memory Renaming for Intermittent Computing"
date:   2022-07-15 06:40:00 -0500
categories: paper
paper_title: "NvMR: Non-Volatile Memory Renaming for Intermittent Computing"
paper_link: https://dl.acm.org/doi/10.1145/3470496.3527413
paper_keyword: NVM; Intermittent Computing; NVMR; Idempotent Execution
paper_year: ISCA 2022
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

**Comments:**

1. The paper seems to over-complicate a very simple concept: On redo-logging, all dirty blocks must be held from
being written back from the cache, before the transaction commits (or before the snapshot is taken), 
because otherwise the NVM image will be polluted.
This paper seeks to loosen this requirement a little, with the observation that if a word is blindly written
before being read since the last snapshot, then the word does not need to be held back.
This is because on an re-execution, the word will still be blindly written anyway, so its contents do not matter,
indicating that the word can be polluted without corrupting program state.

This technique works with all redo-logging based design, and is not particularly related to intermittent computing.
Of course, the algorithm proposed by the paper is not pure redo-logging. In fact, it is shadow paging + redo-logging
with lower write amplification. 

2. The mapping table update and register dumping should be atomic, i.e., there should be no power interrupt
between these two processes, because otherwise, the mapping table will be in an inconsistent state, which
makes the system unrecoverable. The paper does not explicitly state this requirement, and also it is non-trivial
to make mapping table update atomic (one way is to have two mapping tables. Updating the table is merely a 
single pointer swing).

This paper proposes NVMR, a NVM-based intermittent computing framework that supports snapshotting (called "backups"
in the paper). Snapshotting is an indispensable feature for intermittent devices, due to the lack of reliable 
power source and the resulting intermittent nature of computing. With snapshotting, the device periodically
checkpoints its execution state and memory state to the NVM. When the power source completely drains, or when an
unexpected power interrupt occurs, the device loses all volatile states and the progress since the last snapshot. 
When power supply resumes, the device will restart from the last snapshot by loading the execution state and memory
state and resumes execution from the snapshot. 
This way, some computing progress can always be made as long as the device makes at least one snapshot
between power cycles.

The snapshotting model the paper assumes is as follows. The system is equipped with a write-back cache hierarchy, 
which can evict dirty cache blocks back to the NVM at any moment during execution. 
Snapshots are taken periodically at some points during execution as a measure of preserving progress.
The snapshot is logically atomic with regard to execution, and it reflects the system state at the logical 
time point the snapshot is taken.


The challenge of snapshotting in intermittent computing, however, is that dirty data might be evicted from the cache,
before the snapshot takes place, which pollutes the memory image. 
If power interrupts happen after the eviction and before the snapshot, the system might be in an inconsistent state,
because the memory image is no longer the one from the previous snapshot, making the system unrecoverable.


