---
layout: paper-summary
title:  "Pisces: A Scalable and Efficient Persistent Transactional Memory"
date:   2020-02-02 23:02:00 -0500
categories: paper
paper_title: "Pisces: A Scalable and Efficient Persistent Transactional Memory"
paper_link: https://www.usenix.org/system/files/atc19-gu_0.pdf
paper_keyword: NVM; Transaction; Pisces
paper_year: USENIX ATC 2019
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper presents Pisces, a software transactional memory design for Non-Volatile DIMM. Pisces uses a limited form
of multiversion concurrency control (MVCC) protocol, dual version concurrency control (DVCC), to implement snapshot-isolation
(SI) transactional semantics. The paper points out that SI is feasible for NVM compared with serializability in terms of 
blocked readers. For serializable semantics, readers must wait for a dirty data item to be fully persisted and the transaction 
to be committed, before the read transaction does. On recovery, the logs of transactions must be replayed on the order 
consistent with data dependencies (also transaction's serialization order) to avoid incorrectly overwriting a value. 
For SI, however, only write-write conflicts are detected, and transactions are ordered by the order that they overwrite
data items. This prevents reading transactions from being blocked by a pending writing transaction it reads from, which
decreases transaction commit latency.

The paper assumes a baseline MVCC model as follows. Transactions maintain a private write set for storing uncommitted data.
Data items are maintained as a linked list of versions, each having a timestamp indicating the commit time of the transaction
that creates it. A global timestamp counter maintains the current logical time. On transaction begin, the transaction 
reads the value of the global timestamp counter as the begin timestamp, bts. 