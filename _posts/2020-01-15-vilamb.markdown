---
layout: paper-summary
title:  "Vilamb: Low Overhead Asynchronous Redundancy for Direct Access NVM"
date:   2020-01-15 16:57:00 -0500
categories: paper
paper_title: "Vilamb: Low Overhead Asynchronous Redundancy for Direct Access NVM"
paper_link: http://users.ece.cmu.edu/~rkateja/pubs/fast20.pdf
paper_keyword: NVM; Vilamb; Checksum; Redundancy
paper_year: FAST 2020 Preprint
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper proposes Vilamb, a software solution to redundancy problems of NVM DAX storage. Redundancy here refers to the 
mechanism for ensuring that data corruption caused by firmware bugs or random bit flips can be detected or even fixed before
causing bigger troubles. In conventional file systems, redundancy information of pages can be verified and updated when 
pages are fetched into or evicted from the page buffer, which is controlled by the file system. For NVDIMM DAX mapped pages, 
however, the OS has no control over the fetch and eviction of cache line sized blocks, since the cache controller determines 
when a block enters and leaves the cache hierarchy. 

Previous researches have proposed solutions that integrate the redundancy controller into the last level cache (LCC). Blocks
fetched from the NVM are verified for integrity using a page-level or cache line-level checksum stored elsewhere. Evicted
dirty blocks cause the checksums and parities to be updated using the diff between the dirty and the old content. The
hardware solution, however, requires long and tedious verification at IC level, and is unlikely to be adopted by commercial
serves in the near future. 

Vilamb is a software solution to redundancy problems that features easy-to-use interface and non-intrusive detection mechanism.
Previous software solutions often require special interface for intercepting memory accesses, which are otherwise transparent
to the library, and to mark the begin and the end of the redundancy-protected region. For example, Palingon, a software library
for writing redundancy-protected software, mandates that programmers should use its transactional interface and decorate each
load and store with a library wrapper. This requires re-compiling the application, which is sometimes even not easily achievable.
