---
layout: paper-summary
title:  "Kiln: Closing the Performance Gap Between Systems With and Without Persistence Support"
date:   2019-02-20 23:39:00 -0500
categories: paper
paper_title: "Kiln: Closing the Performance Gap Between Systems With and Without Persistence Support"
paper_link: http://www.cse.psu.edu/~juz138/files/150-zhao.pdf
paper_keyword: Kiln; NVM; Cache; LLC
paper_year: MICRO 2013
rw_set: 
htm_cd: 
htm_cr: 
version_mgmt: 
---

This paper proposes Kiln, a novel design that achieves atomic persistence using persistent LLC. In classical designs there
are two ways of achieving the same effect, using either Write-Ahead Logging (WAL) or Copy-On-Write (COW). WAL requires the 
programmer or hardware to generate log entries on every data modification. In addition, persistent barriers are also inserted 
on certain locations of the program to enforce the correct write ordering dependency between log entries and dirty cache 
lines. COW requires an extra level of indirection. On modification, data items are copied to a new location on the NVM, 
and then the modification is performed on the new copy. The mapping is changed to point to the new copy after the modification. 
New copies of data items must be persisted to the NVM before the transaction commits.

Neither WAL nor COW is perfect for efficient persistent atomic regions. Both schemes induce extra memory traffic. In WAL,
data items must be copied twice (one to generate the log entry, using either old or new value based on logging type, another 
to update the data item), resulting in three copies. In COW, extra NVM storage is used by multiple versions of data items 
as well as the mapping table. In addition, if WAL is to be used, the long latency of persist barriers cannot easily be removed 
from the critical path, which is another source of slowdown. 

This paper adopts a third approach, which extends the persistence domain to the last level cache (LLC) using techniques such
as battery powered SRAM. No expensive data movement or persistence berriers are needed, because in order to achieve 
persistence, it is sufficient to evict data to the LLC, which has lower latency and higher bandwidth. 

The operation of Kiln is described as follows. During normal operation, dirty cache lines written by different transactions
are recorded by caches on all levels. On transaction begin, a globally unique transaction ID is distributed such that
every transaction can be uniquelly identified using the ID. Dirty cache lines generated during the transaction are tagged 
with the transaction ID. Kiln extends tag arrays with an array of transaction IDs, which are set during a transaction when
the cache line is written for the first time. 