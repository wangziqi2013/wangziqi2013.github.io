---
layout: paper-summary
title:  "Read-Log-Update"
date:   2019-10-24 16:22:00 -0500
categories: paper
paper_title: "Read-Log-Update"
paper_link: https://dl.acm.org/citation.cfm?id=2815406
paper_keyword: RLU; RCU; Synchronization
paper_year: SOSP 2015
rw_set: 
htm_cd: 
htm_cr: 
version_mgmt: 
---

**Highlights:**

1. RLU can be considered as a reduced form of timestamp based STM, which makes it more lightweight and actually usable.

**Lowlights:**

1. The "RLU Deferring" section is highly unclear and even sometimes self-contradictory. For example, at the second page
   of section 3.7, it is said "it significantly reduces the contention on the global clock, since this clock only gets
   updated after RLU synchronization calls", while at everywhere else the global clock is said to be updated before 
   the synchronize call.

2. I don't quite buy the argument that RLU deferral generally optimizes things, because the thread still has to execute a 
   synchronization barrier waiting for all other threads, and then write back the log (i.e. in the general case
   the number of synchronizations and write backs do not change). It is only beneficial when the same object is 
   updated by the same thread repeatedly, at which time multiple write backs and synchronizations can be batched into
   one, at the cost of delayed visibility of data (i.e. not linearizable since non-overlapping readers after the writer 
   in real time cannot observe the change). The paper leaves out this important assumption and simply claim that 
   deferred updates 

This paper proposes 