---
layout: paper-summary
title:  "Pacman: An Efficient Compaction Approach for Log-Structured Key-Value Store on Persistent Memory"
date:   2023-01-14 02:06:00 -0500
categories: paper
paper_title: "Pacman: An Efficient Compaction Approach for Log-Structured Key-Value Store on Persistent Memory"
paper_link: https://www.usenix.org/conference/atc22/presentation/wang-jing
paper_keyword: NVM; Pacman; Log-structured NVM; Key-Value Store; NVM
paper_year: USENIX ATC 2022
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper presents Pacman, a software solution aiming at reducing the overhead of log-structure key-value store
running on Byte-Addressable Non-Volatile Memory (NVM). The paper is motivated by the uniformly high overhead of garbage 
collection in log-structured key-value store designs when they are deployed on NVM. The proposed software 
solution, Pacman, addresses the challenge by adopting special software techniques based on the performance 
characteristics of NVM devices. As a result, Pacman improves the operational throughput of key-value stores even
at high storage utilization.

The Pacman design is based on log-structured key-value stores where modifications to the existing key-value entries are 
implemented log appends of the newer key-value rather than in-place updates. As a result, there can be multiple 
versions of key-value entries
co-existing on the persistent storage. To maintain the correct write semantics, i.e., a read operation should always 
access the most up-to-date write, an extra index is added to the key-value store which maps keys to the most recently
appended key-value pairs. Read operations must go through the index in order to access the correct instance of 
value, and modification operations also have to update the index to point to the newly appended key-value pair 
to commit the change. 

While the paper does not specify a concrete implementation, and Pacman is generally applicable to virtually any
log-structured key-value store design, it is suggested in the paper that logs are implemented as per-thread 
memory segments of MBs in size, and the index can be implemented as either a hash table or a tree structure.
In addition, the index can be maintained in either volatile memory or persistent memory. Both options would 
work for a key-value store, and it barely affects the effectiveness of Pacman.

The paper notes that the most unique operation associated with log-structures key-value stores is garbage collection 
(GC).
From a high level, the GC operation compacts a log segment by copying key-value entries that are still alive (i.e.,
being referenced by the index) to another log segment, freeing the part of storage occupied by entries that are 
dead (i.e., not being referenced by the index). Dead entries in log-structured key-value stores can be introduced 
by either explicitly removing an entry, or by modifying an existing entry. 
Consequently, in write-dominant scenarios, GC is a vital process for recycling persistent storage and will likely be
invoked frequently.
Unfortunately, when deployed on NVM, the paper observes that GC has become a major bottleneck for key-value stores,
especially when the persistent storage utilization is high, as evidenced by the figure presented in the paper. 
In addition, adding more background threads to perform GC does not alleviate the problem by much, since, as the 
paper points out, the GC process is likely bounded by NVM write bandwidth rather than computation.

The paper lists several reasons that explain the observed effect. First, GC requires index probings to
determine whether a key-value entry in the log segment is alive or not. Besides, after the data copy concludes, the 
GC process also needs to update the index to point to the new entry. Accesses to the index will incur a large number 
of small random reads and writes, which increases the latency of GC operations.
Secondly, current implementations use persist barriers consisting of one or more cache line flushes plus a memory 
fence at the end, in order to maintain correct write ordering between the data and the metadata, which is crucial
for correctness. However, the persist barrier is expensive and will severely affect performance. The paper also noted
that, on newer hardware models, persist barriers are no longer strictly required, as the cache hierarchy is also
included in the persistence domain (with a hardware feature called eADR). However, developers may still want to 
write dirty data back to the NVM explicitly, due to the better write throughput achieved. 
Lastly, GC inevitably involves copying data from one log segment to another. The paper observes that most 
implementations do not separate cold and hot data. As a result, a log segment may contain mixed cold and hot entries,
which incurs unnecessary data copy as cold entries, if stored in their dedicated log segments, do not need frequent GC. 
