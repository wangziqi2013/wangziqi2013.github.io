---
layout: paper-summary
title:  "Pacman: An Efficient Compaction Approach for Log-Structured Key-Value Store on Persistent Memory"
date:   2023-01-14 02:06:00 -0500
categories: paper
paper_title: "Pacman: An Efficient Compaction Approach for Log-Structured Key-Value Store on Persistent Memory"
paper_link: https://www.usenix.org/conference/atc22/presentation/wang-jing
paper_keyword: NVM; Pacman; Log-structured NVM; Key-Value Store; NVM
paper_year: USENIX ATC 2022
rw_set:
htm_cd:
htm_cr:
version_mgmt:
---

This paper presents Pacman, a software solution aiming at reducing the overhead of log-structure key-value store
running on Byte-Addressable Non-Volatile Memory (NVM). The paper is motivated by the uniformly high overhead of garbage 
collection in log-structured key-value store designs when they are deployed on NVM. The proposed software 
solution, Pacman, addresses the challenge by adopting special software techniques based on the performance 
characteristics of NVM devices. As a result, Pacman improves the operational throughput of key-value stores even
at high storage utilization.

The Pacman design is based on log-structured key-value stores where modifications to the existing key-value entries are 
implemented log appends of the newer key-value rather than in-place updates. As a result, there can be multiple 
versions of key-value entries
co-existing on the persistent storage. To maintain the correct write semantics, i.e., a read operation should always 
access the most up-to-date write, an extra index is added to the key-value store which maps keys to the most recently
appended key-value pairs. Read operations must go through the index in order to access the correct instance of 
value, and modification operations also have to update the index to point to the newly appended key-value pair 
to commit the change. 

While the paper does not specify a concrete implementation, and Pacman is generally applicable to virtually any
log-structured key-value store design, it is suggested in the paper that logs are implemented as per-thread 
memory blocks of MBs in size, and the index can be implemented as either a hash table or a tree structure.
In addition, the index can be maintained in either volatile memory or persistent memory. Both options would 
work for a key-value store, and it barely affects the effectiveness of Pacman.
